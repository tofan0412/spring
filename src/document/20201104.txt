@RequestMapping : 요청 처리할 컨트롤러의 메서드를 지정
사용 위치 : 1. class
		  2. method

@Controller
@RequestMapping(path="/mainPath")
public class xxxController{
	
	@RequestMapping(path="/subPath")
	public String subPath(){
	
	}
	
	@RequestMapping(path="/subPath2")
	public String subPath2(){
	
	}
}
	
/mainPath/subPath : xxxController.subPath();
/mainPath/subPath2 : xxxController.subPath2();

@RequestMapping 속성
path : url 패턴 ( default)
	@RequestMapping("login/view") == @RequestMapping(path="login/view")
	
method : 요청 메서드에 따라 설정한 요청에 대해서만 처리하게끔 한정
	@RequestMapping(path="login/view", method={RequestMethod.GET, RequestMethod.POST})
	@GetMapping() : GET에 대한 요청만 처리하는 Annotaion이다.
	이는 결국 @RequestMapping(~, method=RequestMethod.GET) 와 동일하다.

params : 파라미터 중에 특정 값을 갖거나, 파라미터가 존재하는 등 파라미터와 관련된 조건을 기술
	@RequestMapping(path="", params = {"userid"}) : userid 파라미터가 존재할 때
	@RequestMapping(path="", params = {"!userid"}) : userid 파라미터가 존재하지 않을 때
	@RequestMapping(path="", params = {"pass=brownPass"}) pass라는 파라미터가 전송되었고 그 값이 brownPass일 때
	@RequestMapping(path="", params = {"pass!=brownPass"}) pass라는 파라미터가 전송되었고 그 값이 brownPass가 아닐 때

header : 요청 헤더에 특정 값이 담겨 있을 때
consume - COntent-type, produce - Accept 헤더 : ajax 수업 때 다시 ...

Request 객체를 선언하고, setAttribute를 통해 원하는 값을 Model이 아닌 scope 객체에 넣어도 되지만, 
Spring Framework 에서 원하는 건 그게 아니다.

Spring Controller 메서드의 인자 : Servlet과 다르게, 정해진 규칙 안에서 자유롭게 인자를 설정할 수 있다.
1. Servlet Api : HttpServletRequest, HttpServletResponse, HttpSession(가장 많이 쓸 것)
	
	public String method(HttpServletRequest request){
		HttpSession session = request.getSession();
		session.setAttribute("S_MEMBER", ~ );
	}
	위 코드는 인자를 자유롭게 설정할 수 있는 Spring Controller에서 다음과 같이 대체된다.
	public String method(HttpSession session){
		session.setAttribute("S_MEMBER", ~ );
	}
	
2. command 객체 (form 전송 또는 ajax 전송을 통해서 전달된 파라미터를 담는 객체 = Value Object)
3. 파라미터를 담을 개별 변수 (String userid, String pass) 

3.5 bindingResult : binding하는 과정에서 값을 체크할 수도 있다.
	바인딩 결과를 담는 객체 - 추후 validation 수업시 진행

4. model/ModelMap/map : 속성을 저장할 객체(Servlet에서 Request 객체에 해당한다.) 

5. RedirectAttribute : 리다이렉트 페이지에서 사용할 속성을 설정 (최초 한번에 대해서만 경고창을 띄우고 싶을 때 사용)
   


. HttpMethod : POST, GET
. Principal : Spring Security에서 사용하는 사용자 인증 정보..

스프링 컨트롤러에서 사용할 수 있는 어노테이션..
@RequestParam : 파라미터 이름과 값을 담을 변수 명이 다를 때 파라미터를 특정 변수에 할당할 수 있다.
				기본 값 설정
				사용방법 : 컨트롤러 메서드의 인자에 설정한다.
				(결국 바인딩을 개발자가 직접 지정하는 것이다.) 
	
				name : 받고싶은 파라미터 이름 지정
				required : 파라미터 존재 유무 설정, 기본은 true
				required가 true일 때 해당 파라미터가 전송되지 않으면 에러
				
			
@RequestPart : multipart/form-data : 파일 업로드시 다시 ...
				multipartResolver라는 bean이 반드시 필요하다.


@RequestHeader, @CookieValue : 요청시 사용된 헤더, 쿠키값을 파라미터 인자에서 받을 수 있다.

@PathVariable : 패스 변수.
				@RequestMapping에 설정한 url 경로 중 일부를 파라미터 인자로 받아온다. 
				
@RequestMapping("/notice/{library}")
	public String notice(@PathVariable("library") String library){
	
	}
	
위와 같이 설정하면 다음과 같이 url을 설정할 때 library 변수는 다음과 같다
/notice/ct -> library = "ct"
/notice/sk -> library = "sk"

Spring Controller의 return type
1. String : 논리적인 viewName을 의미한다.
			ViewResolver에 의해 처리할 view를 결정하여 처리, 많이 사용되는 형태

2. ModelAndView : Spring Container는 응답 생성을 위해 내부적으로 ModelAndView 객체를 생성하여 처리
				  하는데 그 과정을 개발자가 직접 하는 것이다. 
				  
3. void : 응답이 없을 수도 있다. servlet과 같은 형태 (outputStream, writer 객체를 통해 응답을 
		 직접 생성하는 경우)
		 image 응답을 생성하는 Controller 생성 ( 추후에 할 것이다..)
		 
4. View : 응답을 처리할 View 객체를 직접 개발자가 명시 ( 잘 사용하지는 않는다.)


@ModelAttribute
	메서드에서 사용시 : 1. @RequestMapping 어노테이션이 붙은 메서드가 실행되기 전에 항상 먼저 실행 ( 공통적인 로직을 따로 뺄 수 있다. )
					2. 해당 메서드에서 반환하는 값을 Model 객체에 자동으로 설정.

**command 객체는 자동으로 model에 넣어준다!!
	
	메서드 인자에서 사용시 : 
	public String methodName(@ModelAttribute("rangers") List<String> rangers){
	}
	
	메서드 인자로 Model  객체를 선언하지 않고도 모델에 설정된 속성을 메서드 인자에서 받을 수 있다.
	@ModelAttribute("test") MemberVo modelVo와 같이 Model에 존재하지 않는 값을 선언하는 경우, 
	ModelVo 타입인 값을 만든다. (userid와 같은 속성값만 모두 null이다) ==> 값을 초기화하는데 쓸 수 있다.

	** 단점 : 해당 어노테이션이 붙은 메서드가 매번 실행된다..

@SessionAttributes : class 레벨에 적용 
					 설정한 속성을 session에 저장하여
					 @ModelAttribute 어노테이션이 붙은 메서드가 요청할 때마다
					 실행되는 것을 방지한다. 
