마이그레이션
ms-sql server ==> oracle
servlet ==> spring container

Controller 메서드 인자 설정 시 발생할 수 있는 문제점
	1. primitive type(int, double ...)
		메서드(int type) ==> page 파라미터가 반드시 존재해야 한다. 

개발 시 고려사항 : 해당 파라미터가 반드시 전송이 되는가!!!
	전송이 될 경우 : 별 다른 조치 없이 사용
	전송이 안 될 경우 : @RequestParam(name="Parameter name", required=false, defaultValue="")
														(해당 파라미터가 반드시 존재?)		(받는 인자가 없을 경우 기본값)
					또는 Command 객체를 사용한다. 
					(PageVo의 page와 pageSize는 선언만 하고 초기화 하지는 않았지만, 0으로 자동 초기화 되기 때문에 에러가 발생하지는 않는다.)
					** 즉, primitive type의 필드는 객체 생성시 자동으로 초기값(0, null ..)이 할당된다. 				


스프링 객체 검증
1. Spring Validator
	1. 스프링 프레임워크에서 제공하는 Validator interface를 구현
	- supports : 검증하려고 하는 객체가 해당 validator에서 검증할 수 있는지 여부를 반환한다.
	- validate : 검증 로직을 작성한다 - 개발자가 로직을 직접 구현한다.
	
	2. Controller 메서드에 검증하려고 하는 커맨드 객체 바로 뒤에 BindingResult 객체를 인자로 선언한다.
		검증 객체에 문제가 발생하는 경우 error를 BindingResult 객체에 저장한다. 
		스프링 프레임워크에서 메서드 인자 구성이 비교적 자유롭지만,
		검증 객체는 검증을 하려고 하는 커맨드 객체 뒤에 선언이 되어 있어야 한다. ( 필수 )
		
		이후 메서드 시작과 함께 다음과 같이 입력한다.
		new MemberVoValidator().validate(memberVo, br);
		

2. JSR303 유효성 검증
	1. command 객체 인자 앞에 @Valid 어노테이션 적용
	2. command 객체의 필드에 검증 어노테이션을 적용
	3. command 객체 뒤에 BindingResult 객체를 인자로 선언
		객체 검증의 결과가 bindingResult 객체에 담긴다.
		==> 개발자가 직접 검증과 관련된 메서드를 호출하지 않는다.
	
	** Spring Vaildator과 비교해서 복잡한 검증은 불가능하다. 
	@Max, @Min, @Size, @Pattern(정규식) 등 간단한 형태만 가능하다.
	
	복잡한 형태 : 네이버에서 비밀번호 변경 시 기존에 사용하던 비밀번호를 사용하지 못하게끔 검증
	** JSR303에서는 어노테이션의 이름이 properties에서의 error 이름이 된다 !


SPRING Controller에서 예외처리하기
	- @ExceptionHandler 등록(Controller마다 등록)
		Controller Class에 @ExceptionHandler 어노테이션이 적용된 메서드를 생성
		어노테이션 속성으로 해당 메서드에서 처리할 예외에 대해 선언
		해당 예외가 발생시 @ExceptionHandler 어노테이션이 적용된 메서드가 호출된다.
	- @ControllerAdvice를 통한 공통 예외 처리
		예외 처리를 할 클래스를 생성, 클래스에 @ControllerAdvice 어노테이션 적용
		해당 클래스의 예외처리 메서드는 @ExceptionHandler 어노테이션을 적용, 처리 가능한
		예외 타입에 대해 등록
		@ControllerAdvice 어노테이션이 적용된 클래스를 스캔할 수 있도록
		Component-scan element를 수정
	
	- @ResponseStatus를 이용한 응답 코드 설정
	사용자 정의 예외가 발생 시 Spring Framework에게 응답 코드를 설정하는 방법!
	
	















